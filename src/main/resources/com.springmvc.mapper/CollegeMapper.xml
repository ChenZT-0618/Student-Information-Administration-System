<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.springmvc.dao.CollegeMapper">
    <resultMap id="BaseResultMap" type="com.springmvc.entity.College">
        <id column="college_id" property="collegeId" jdbcType="VARCHAR"/>
        <result column="college_name" property="collegeName" jdbcType="VARCHAR"/>
        <result column="college_stu_num" property="collegeStuNum" jdbcType="INTEGER"/>
        <result column="college_major_num" property="collegeMajorNum" jdbcType="INTEGER"/>
        <result column="college_property" property="collegeProperty" jdbcType="VARCHAR"/>
        <result column="college_tea_id" property="collegeTeaId" jdbcType="VARCHAR"/>
        <result column="college_remark" property="collegeRemark" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="CollegeResultMap" type="com.springmvc.dto.CollegeDto" extends="BaseResultMap">
        <result column="college_tea_name" property="collegeTeaName" jdbcType="VARCHAR"/>

    </resultMap>
    <insert id="insertCollege" parameterType="com.springmvc.dto.CollegeDto">
        insert into college
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="collegeId != null and collegeId != ''">
                college_id,
            </if>
            <if test="collegeName != null and collegeName != ''">
                college_name,
            </if>
            -- Mybatis Integer类型判断不要判断空串，不然会把0当成''
            <if test="collegeStuNum != null">
                college_stu_num,
            </if>
            <if test="collegeMajorNum != null">
                college_major_num,
            </if>
            <if test="collegeProperty != null and collegeProperty != ''">
                college_property,
            </if>
            college_tea_id,
            college_remark
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="collegeId != null and collegeId != ''">
                #{collegeId,jdbcType=VARCHAR},
            </if>
            <if test="collegeName != null and collegeName != ''">
                #{collegeName,jdbcType=VARCHAR},
            </if>
            <if test="collegeStuNum != null">
                #{collegeStuNum},
            </if>
            <if test="collegeMajorNum != null">
                #{collegeMajorNum},
            </if>
            <if test="collegeProperty != null and collegeProperty != ''">
                #{collegeProperty},
            </if>
            #{collegeTeaId,jdbcType=VARCHAR},
            #{collegeRemark,jdbcType=VARCHAR}
        </trim>
    </insert>
    <update id="updateStuNumAddOne">
        update college set college_stu_num=college_stu_num+1 where college_id=#{collegeId}
    </update>
    <update id="updateStuNumMinusOne">
        update college set college_stu_num=college_stu_num-1 where college_id=#{collegeId}
    </update>

    <update id="updateTeaId">
        update college set college_tea_id=#{collegeNewTeaId} where college_tea_id=#{collegeOriTeaId}
    </update>
    <update id="updateDeleteTea">
        update college set college_tea_id=null where college_tea_id=#{collegeTeaId}
    </update>
    <update id="updateSetStuNum">
        update college set college_stu_num=#{collegeStuNum} where college_id=#{collegeId}
    </update>
    <update id="updateMajorNumAddOne">
        update college set college_major_num=college_major_num+1 where college_id=#{collegeId}
    </update>
    <update id="updateMajorNumMinusOne">
        update college set college_major_num=college_major_num-1 where college_id=#{collegeId}
    </update>
    <update id="updateInfo">
        update college set college_id=#{collegeDto.collegeId}
          ,college_name=#{collegeDto.collegeName},college_stu_num=#{collegeDto.collegeStuNum},college_major_num=#{collegeDto.collegeMajorNum}
          ,college_property=#{collegeDto.collegeProperty},college_tea_id=#{collegeDto.collegeTeaId},college_remark=#{collegeDto.collegeRemark}
        where college_id=#{collegeOriId}
    </update>
    <delete id="deleteOneCollege">
        delete from college where college_id=#{collegeId}
    </delete>


    <select id="findAllCollege" resultMap="BaseResultMap">
        select * from college
    </select>
    <select id="queryAllCollegeInfo" resultMap="CollegeResultMap">
        select table1.*
        ,table2.tea_name as college_tea_name
        from college table1 left join teacher table2
        on table1.college_tea_id=table2.tea_id
        <where>
            <if test="collegeName!=null and collegeName!=''">
                <bind name="collegeNameLike" value=" '%' + collegeName + '%' "/>
                table1.college_name like #{collegeNameLike}
            </if>
        </where>
    </select>
    <select id="findStuCollegeOwnInfoById" resultMap="CollegeResultMap">
      select t0.* from
        (select table1.college_id,table1.college_name,table1.college_stu_num,table1.college_major_num,table1.college_property,table1.college_tea_id
          ,table2.tea_name as college_tea_name,table1.college_remark
        from college table1
        left join teacher table2 on table1.college_tea_id=table2.tea_id) as t0,student s1 ,major m1
      where s1.stu_id=#{stuId} and m1.major_id=s1.major_id and m1.college_id=t0.college_id
    </select>
    <select id="findTeaCollegeOwnInfoById" resultMap="CollegeResultMap">
        select t0.* from
          (select table1.college_id,table1.college_name,table1.college_stu_num,table1.college_major_num,table1.college_property,table1.college_tea_id
             ,table2.tea_name as college_tea_name,table1.college_remark
           from college table1
             left join teacher table2 on table1.college_tea_id=table2.tea_id) as t0,teacher t1,major m1
        where t1.tea_id=#{teaId} and m1.major_id=t1.major_id and m1.college_id=t0.college_id
    </select>
    <select id="findIdByCollegeName" resultType="string">
        select college_id from college where college_name=#{collegeName}
    </select>
    <select id="findCollegeById" resultMap="BaseResultMap">
        select * from college where college_id=#{collegeId}
    </select>
    <select id="findCollegeByName" resultMap="BaseResultMap">
        select * from college where college_name=#{collegeName}
    </select>
    <select id="findCollegeByTeaId" resultMap="BaseResultMap">
        select * from college where college_tea_id=#{teaId}
    </select>
    <select id="findMaxCollegeId" resultType="string">
        SELECT MAX(CAST(college_id AS SIGNED)) FROM college
    </select>
</mapper>